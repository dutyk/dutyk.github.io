{"pages":[{"title":"about","text":"","link":"/about/index.html"}],"posts":[{"title":"优秀的git项目","text":"本文整理优秀的git项目 序号 项目名称 git地址 1 即时通讯 universe_push 2 axon ddd框架 AxonFramework 3 ant-design 前端框架 ant-design","link":"/2020/05/08/%E4%BC%98%E7%A7%80git%E9%A1%B9%E7%9B%AE%E6%95%B4%E7%90%86/"},{"title":"后端技术栈整理","text":"本博客整理常用的后端技术栈，包括微服务架构，分布式任务调度，AKKA， 大数据技术，消息队列，数据库， K8s, Docker等等。 微服务架构 序号 技术栈 开源项目 说明 1 微服务网关 sia-gateway sia-gateway sia-gateway sia-gateway 2 微服务架构 3 响应式微服务架构 4 分布式技术 5 分布式锁 6 分布式缓存 7 SpringCloud 8 SpringCloud Alibaba 分布式任务调度 序号 技术栈 开源项目 说明 1 sia-task分布式任务 sia-task sia-task AKKA 序号 技术栈 开源项目 说明 1 akka cluster 大数据技术 序号 技术栈 开源项目 说明 1 Flink 2 ES 消息队列 序号 技术栈 开源项目 说明 1 RocketMQ 2 Kafka 数据库 序号 技术栈 开源项目 说明 1 Mysql k8s 序号 技术栈 开源项目 说明 1 K8s In Action 算法 序号 技术栈 开源项目 说明 1 递归 2 回溯 3 动态规划 4 数组 5 树 6 链表 前端 序号 技术栈 开源项目 说明 1 React 2 Flutter 3 小程序 taro 工具 序号 技术栈 开源项目 说明 1 2","link":"/2020/04/11/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%A0%88%E6%B1%87%E6%80%BB/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/02/22/hello-world/"},{"title":"我的第一篇博客","text":"初次使用githubpage部署博客，很激动。我的想法很简单。 代码示例 123456789public String getPlayUrl(String locationUrl) { Document result = JsoupUtils.getDocWithPhone(locationUrl); String text = StringEscapeUtils.unescapeJava(result.text()); text = text.replace(&quot;vjs_149067353337651(&quot;, &quot;&quot;); text = text.replace(&quot;);&quot;, &quot;&quot;); JSONObject videoJson = JSONObject.parseObject(text); String playUrl = videoJson.getJSONArray(&quot;nodelist&quot;).getJSONObject(0).getString(&quot;location&quot;); return playUrl;} 平时没事多写写博客。 可以用阿里OSS存储图片，非常方便。 代码示例二 12345678910111213141516171819202122232425262728@Overridepublic List&lt;Episode&gt; parseEpisodes(String videoUrl) { List&lt;Episode&gt; episodes = new ArrayList&lt;&gt;(); Document document = JsoupUtils.getDocWithPhone(videoUrl); Matcher matcher = Pattern.compile(&quot;([0-9]{5,})\\\\.html&quot;).matcher(document.html()); if (matcher.find()) { String vid = matcher.group(1); String videosAPI = String.format(LETV_VIDEOS, vid); String data = JsoupUtils.getDocWithPhone(videosAPI).body().text(); JSONObject jsonObject = JSONObject.parseObject(data); JSONArray array = jsonObject.getJSONObject(&quot;data&quot;).getJSONObject(&quot;episode&quot;).getJSONArray(&quot;videolist&quot;); if (array.size() &gt; 1) { for (int i = array.size() - 1; i &gt;= 0; i--) { JSONObject object = array.getJSONObject(i); Episode episode = new Episode(); Integer index = object.getInteger(&quot;episode&quot;); if (index &lt; 10) { episode.setIndex(&quot;0&quot; + index); } else { episode.setIndex(&quot;&quot; + index); } episode.setValue(object.getString(&quot;url&quot;)); episodes.add(episode); } } } return episodes;} 代码示例三 123456789101112private String matchVid(String videoUrl) { Matcher matcher = Pattern.compile(VID_REGEX).matcher(videoUrl); if (matcher.find()) { return matcher.group(1); } else { Document realDocument = JsoupUtils.getDocWithPC(videoUrl); matcher = Pattern.compile(&quot;vid:\\&quot;(.*?)\\&quot;&quot;).matcher(realDocument.html()); if (matcher.find()) return matcher.group(1); throw new AnyException(ExceptionEnum.VID_CANNOT_MATCH); }}","link":"/2020/02/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"},{"title":"经历职业生涯最长一个春节，明天复工","text":"经历了职业生涯最长的一个假期，明天正式去公司复工，还是有点忐忑的。新的一年要更加扎实技术，从实战向深度迈进，抓住一两个方向深入研究。更加熟悉公司业务，加强和相关业务同事的沟通学习，毕竟互联网金融业务才是核心。 经历一场大的疫情，深切感悟：活着才是硬道理，要更加注重身体健康,加强体育锻炼。 2019年我儿子出生了，新的一年要花更多时间陪伴孩子，照顾孩子，带着孩子去逛逛，玩玩。 希望2020年会是充实，幸福，有进步的一年。","link":"/2020/02/23/%E7%BB%8F%E5%8E%86%E8%81%8C%E4%B8%9A%E7%94%9F%E6%B6%AF%E6%9C%80%E9%95%BF%E4%B8%80%E4%B8%AA%E6%98%A5%E8%8A%82%EF%BC%8C%E6%98%8E%E5%A4%A9%E5%A4%8D%E5%B7%A5/"},{"title":"Compound协议","text":"本文介绍Compound协议，以此打开Defi世界的大门 版本号：V2.1 常量 常量 描述 liquidationIncentive 一个乘数，代表用户调用liquidate receives超出的百分比值，例如 1.05，有5％的红利。 此折扣适用于被扣押的资产（即用作抵押的资产）。 collateralFactor 一个乘数，基于抵押品您可以借入的金额，例如.9允许借入抵押品价值的90％。 一定是在0和1之间。 closeFactor 当清算underwater账户的借款时，大于0.05且小于或等于0.9的数字，乘以给定资产的borrowCurrent，以计算最大repayAmount。 maxAssets 一个帐户可以参与的最大资产数量（借入或用作抵押）。 这不会影响帐户在不借款时铸币、赎回或转账。 reserveFactor 计入准备金的应计利息部分，在[0，1]之间， 并可能低于0.10。","link":"/2020/08/21/Compound%E5%8D%8F%E8%AE%AE/"},{"title":"优秀的文章","text":"本文整理优秀的文章 微服务 超越“双十一” | ebay支付核心账务系统架构演进之路 本文介绍了DDD、ES、CQRS落地的相关实践 超越“双十一”—— ebay百万TPS支付账务系统的设计与实现 本文介绍了百万TPS系统的实现 基于微服务成熟度模型的高可用优化实践 本文介绍了爱奇艺技术产品团队用来衡量服务成熟度的模型，并基于此模型对多个后台服务进行评估，总结出了一些常见的低分项，并对低分项整理了相关优化方案。 Kong在好大夫的落地实践 DDD 阿里技术专家详解 DDD 系列- Domain Primitive 本文介绍DDD的事件模型 阿里技术专家详解DDD系列 第二弹 - 应用架构 本文介绍DDD六边形架构 阿里技术专家详解DDD系列 第三讲 - Repository模式 本文介绍Repository模式 DDD系列第四讲：领域层设计规范 中台架构下的 DDD 和落地实践 以DDD架构思想为本，面向复杂业务场景架构设计通过代码框架提供足够约束，让DDD不再仅停留在思想层面降低DDD上手门槛，为研发减负，防止落地偏差降低复杂度，持续保障业务资产的可沉淀可传承提供 领域驱动设计框架Axon实践 基于DDD的微服务设计和开发实战 基于 DDD 思想的酒店报价重构实践 使用 DDD 指导微服务拆分的逻辑 学而思网校直播课堂的架构演进之路 响应式微服务 数据之道 | Akka Actor及其在商业智能数据服务中的应用 本文介绍了AKKA落地的实践 GrowingIO 响应式编程探索和实践 本文介绍akka actor，stream落地经验 风控 复杂风控场景下，如何打造一款高效的规则引擎 本文介绍了如何构建一款规则引擎 风控数据体系-简介 京东集团的风控实践 详解：Drools规则引擎探究以及在IOT的应用 目前所处为淘系技术部负责天猫奢品的业务，业务背景如下：业务包含天猫奢品频道，奢品折扣频道，天猫奢品官方直营旗舰店，魅力惠旗舰店，魅力惠APP等。基于业务场景下会员分为店铺会员，APP会员，天猫奢品行业会员等，而业务需要进行会员精细化的运营，通过不同的会员等级享受不同的权益，而相同的等级还需要做到根据偏好做到千人多权，如何根据复杂的业务需求变化更加精准的进行匹配，考虑Drools规则的逻辑数据的分离和可扩展性，接下来也会在天猫奢品的相关的会员模块中和组内成员探讨是否适合引入。下面是一些基于业务场景的总结和分享。 中间件 面试时说 Redis 是单线程的，被喷惨了！ 本文介绍redis多线程 为什么我们选择Java开发高频交易系统？ Java 日志框架解析：汇总及最佳实践 大数据 实践 | 京东EB级全域大数据平台的演进与治理历程 从 ES 到 Kylin，斗鱼客户端性能分析平台进化之旅 MongoDB + Spark: 完整的大数据解决方案 基础 SpringCache 管理缓存分析 【高并发】秒杀系统架构解密，不是所有的秒杀都是秒杀（升级版）！！ 运维 七张图了解 Kubernetes 内部的架构 解放开发者！3款工具实现快速K8S开发","link":"/2020/11/11/good%20articles/"},{"title":"baby life","text":"分享孩子的日常 孩子照片 我趴腿上 吐舌头 瞧瞧你 文艺范 孩子游泳视频","link":"/2020/11/13/baby/"},{"title":"2020 Q3区块链新闻","text":"2020 Q3 区块链报告 报告","link":"/2020/11/14/blockchainnews/"},{"title":"算法训练_1","text":"本文整理算法,主要是medium难度，包括树、数组、动态规划、深度优先搜索、贪心算法、二分查找、广度优先搜索、双指针、回溯算法、滑动窗口、分治算法等。进行周期性练习，每个周期每个类选择十题，依次循环。 树：[1] 面试题 04.03. 特定深度节点链表给定一棵二叉树，设计一个算法，创建含有某一深度上所有节点的链表（比如，若一棵树的深度为 D，则会创建出 D 个链表）。返回一个包含所有深度的链表的数组。 示例： 输入：[1,2,3,4,5,null,7,8] 1 / \\ 2 3 / \\ \\ 4 5 7 / 8 输出：[[1],[2,3],[4,5,7],[8]] 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/list-of-depth-lcci著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 [2] 998. 最大二叉树 II最大树定义：一个树，其中每个节点的值都大于其子树中的任何其他值。 给出最大树的根节点 root。 就像之前的问题那样，给定的树是从表 A（root = Construct(A)）递归地使用下述 Construct(A) 例程构造的： 如果 A 为空，返回 null否则，令 A[i] 作为 A 的最大元素。创建一个值为 A[i] 的根节点 rootroot 的左子树将被构建为 Construct([A[0], A[1], …, A[i-1]])root 的右子树将被构建为 Construct([A[i+1], A[i+2], …, A[A.length - 1]])返回 root请注意，我们没有直接给定 A，只有一个根节点 root = Construct(A). 假设 B 是 A 的副本，并附加值 val。保证 B 中的值是不同的。 返回 Construct(B)。 示例 1： 输入：root = [4,1,3,null,null,2], val = 5输出：[5,4,null,1,3,null,null,2]解释：A = [1,4,2,3], B = [1,4,2,3,5] 示例 2： 输入：root = [5,2,4,null,1], val = 3输出：[5,2,4,null,1,null,3]解释：A = [2,1,5,4], B = [2,1,5,4,3] 示例 3： 输入：root = [5,2,3,null,1], val = 4输出：[5,2,4,null,1,3]解释：A = [2,1,5,3], B = [2,1,5,3,4] 提示： 1 &lt;= B.length &lt;= 100 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/maximum-binary-tree-ii著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 [3] 1530. 好叶子节点对的数量给你二叉树的根节点 root 和一个整数 distance 。 如果二叉树中两个 叶 节点之间的 最短路径长度 小于或者等于 distance ，那它们就可以构成一组 好叶子节点对 。 返回树中 好叶子节点对的数量 。 示例 1： 输入：root = [1,2,3,null,4], distance = 3输出：1解释：树的叶节点是 3 和 4 ，它们之间的最短路径的长度是 3 。这是唯一的好叶子节点对。 示例 2： 输入：root = [1,2,3,4,5,6,7], distance = 3输出：2解释：好叶子节点对为 [4,5] 和 [6,7] ，最短路径长度都是 2 。但是叶子节点对 [4,6] 不满足要求，因为它们之间的最短路径长度为 4 。 示例 3： 输入：root = [7,1,4,6,null,5,3,null,null,null,null,null,2], distance = 3输出：1解释：唯一的好叶子节点对是 [2,5] 。示例 4： 输入：root = [100], distance = 1输出：0示例 5： 输入：root = [1,1,1], distance = 2输出：1 提示： tree 的节点数在 [1, 2^10] 范围内。每个节点的值都在 [1, 100] 之间。1 &lt;= distance &lt;= 10 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/number-of-good-leaf-nodes-pairs著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 [4] 1302. 层数最深叶子节点的和[5] 222. 完全二叉树的节点个数[6] 114. 二叉树展开为链表[7] 96. 不同的二叉搜索树[8] 538. 把二叉搜索树转换为累加树[9] 337. 打家劫舍 III[10] 437. 路径总和 III数组[1] 34. 在排序数组中查找元素的第一个和最后一个位置[2] 15. 三数之和[3] 31. 下一个排列[4] 39. 组合总和[5] 11. 盛最多水的容器[6] 75. 颜色分类[7] 17. 电话号码的字母组合[8] 560. 和为K的子数组[9] 207. 课程表[10] 96. 不同的二叉搜索树动态规划[1] 比特位计数[2] 96. 不同的二叉搜索树[3] 64. 最小路径和[4] 647. 回文子串[5] 62. 不同路径[6] 279. 完全平方数[7] 309. 最佳买卖股票时机含冷冻期[8] 416. 分割等和子集[9] 139. 单词拆分[10] 300. 最长递增子序列深度优先搜索[1] 647. 回文子串[2] 152. 乘积最大子数组[3] 322. 零钱兑换[4] 221. 最大正方形[5] 494. 目标和[6] 300. 最长递增子序列[7] 139. 单词拆分[8] 416. 分割等和子集[9] 200. 岛屿数量[10] 394. 字符串解码贪心算法[1] [2] [3] [4] [5] [6] [7] [8] [9] [10] 二分查找[1] [2] [3] [4] [5] [6] [7] [8] [9] [10] 广度优先搜索[1] [2] [3] [4] [5] [6] [7] [8] [9] [10] 双指针[1] [2] [3] [4] [5] [6] [7] [8] [9] [10] 回溯算法[1] [2] [3] [4] [5] [6] [7] [8] [9] [10] 滑动窗口[1] [2] [3] [4] [5] [6] [7] [8] [9] [10] 分治算法[1] [2] [3] [4] [5] [6] [7] [8] [9] [10]","link":"/2021/01/18/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%831/"},{"title":"Flowable入门","text":"本文介绍Flowable","link":"/2021/06/30/flowable/"}],"tags":[{"name":"后端开发","slug":"后端开发","link":"/tags/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"杂记","slug":"杂记","link":"/tags/%E6%9D%82%E8%AE%B0/"},{"name":"生活感悟","slug":"生活感悟","link":"/tags/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/"},{"name":"Defi","slug":"Defi","link":"/tags/Defi/"},{"name":"life","slug":"life","link":"/tags/life/"},{"name":"BlockChain","slug":"BlockChain","link":"/tags/BlockChain/"},{"name":"算法","slug":"算法","link":"/tags/%E7%AE%97%E6%B3%95/"},{"name":"工作流","slug":"工作流","link":"/tags/%E5%B7%A5%E4%BD%9C%E6%B5%81/"}],"categories":[{"name":"后端开发","slug":"后端开发","link":"/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"杂记","slug":"杂记","link":"/categories/%E6%9D%82%E8%AE%B0/"},{"name":"Crypto","slug":"Crypto","link":"/categories/Crypto/"},{"name":"life","slug":"life","link":"/categories/life/"},{"name":"算法","slug":"算法","link":"/categories/%E7%AE%97%E6%B3%95/"},{"name":"工作流","slug":"工作流","link":"/categories/%E5%B7%A5%E4%BD%9C%E6%B5%81/"}]}